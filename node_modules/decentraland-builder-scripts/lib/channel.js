"use strict";
/// <reference path="./types.d.ts" />
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var REQUEST_VALUE = '__request_value__';
var REPLY_VALUE = '__reply_value__';
var POLL_INTERVAL = 5000;
function createChannel(id, host, bus) {
    var handlers = {};
    var requests = {};
    var responses = {};
    bus.on(host.name, function (action) {
        var handler = handlers[action.actionId];
        if (handler) {
            handler(action);
        }
        // clear all pending requests for this entity
        requests = {};
    });
    bus.on(REQUEST_VALUE, function (message) {
        if (message.sender !== id && message.entityName === host.name) {
            var key = message.key;
            var response = responses[key];
            if (response) {
                var value = response();
                var reply = {
                    entityName: host.name,
                    key: key,
                    sender: id,
                    value: value
                };
                bus.emit(REPLY_VALUE, reply);
            }
            // clear pending request for this key
            delete requests[key];
        }
    });
    bus.on(REPLY_VALUE, function (message) {
        if (message.sender !== id && message.entityName === host.name) {
            var key = message.key, value = message.value;
            var request = requests[key];
            if (request) {
                request(value);
            }
            // clear pending request for this key
            delete requests[key];
        }
    });
    return {
        id: id,
        bus: bus,
        createAction: function (actionId, values) {
            var action = {
                entityName: host.name,
                actionId: actionId,
                values: values
            };
            return action;
        },
        sendActions: function (actions) {
            var e_1, _a;
            if (actions === void 0) { actions = []; }
            try {
                for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
                    var base = actions_1_1.value;
                    var action = __assign({}, base, { sender: id });
                    bus.emit(action.entityName, action);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        },
        handleAction: function (actionId, handler) {
            handlers[actionId] = handler;
        },
        request: function (key, callback) {
            requests[key] = callback;
            var request = { entityName: host.name, key: key, sender: id };
            var interval = setInterval(function () {
                if (key in requests) {
                    bus.emit(REQUEST_VALUE, request);
                }
                else {
                    clearInterval(interval);
                }
            }, POLL_INTERVAL);
        },
        reply: function (key, callback) {
            responses[key] = callback;
        }
    };
}
exports.createChannel = createChannel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGFubmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxxQ0FBcUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZXJDLElBQU0sYUFBYSxHQUFHLG1CQUFtQixDQUFBO0FBQ3pDLElBQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFBO0FBQ3JDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQTtBQUsxQixTQUFnQixhQUFhLENBQUMsRUFBVSxFQUFFLElBQVMsRUFBRSxHQUFRO0lBQzNELElBQU0sUUFBUSxHQUEwQyxFQUFFLENBQUE7SUFDMUQsSUFBSSxRQUFRLEdBQXlDLEVBQUUsQ0FBQTtJQUN2RCxJQUFNLFNBQVMsR0FBOEIsRUFBRSxDQUFBO0lBRS9DLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFDLE1BQW1CO1FBQ3BDLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDekMsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDaEI7UUFDRCw2Q0FBNkM7UUFDN0MsUUFBUSxHQUFHLEVBQUUsQ0FBQTtJQUNmLENBQUMsQ0FBQyxDQUFBO0lBRUYsR0FBRyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBQyxPQUF1QjtRQUM1QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRTtZQUNyRCxJQUFBLGlCQUFHLENBQVk7WUFDdkIsSUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQy9CLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQU0sS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFBO2dCQUN4QixJQUFNLEtBQUssR0FBaUI7b0JBQzFCLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDckIsR0FBRyxLQUFBO29CQUNILE1BQU0sRUFBRSxFQUFFO29CQUNWLEtBQUssT0FBQTtpQkFDTixDQUFBO2dCQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFBO2FBQzdCO1lBQ0QscUNBQXFDO1lBQ3JDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ3JCO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixHQUFHLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxVQUFDLE9BQXFCO1FBQ3hDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3JELElBQUEsaUJBQUcsRUFBRSxxQkFBSyxDQUFZO1lBQzlCLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM3QixJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDZjtZQUNELHFDQUFxQztZQUNyQyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUNyQjtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTztRQUNMLEVBQUUsSUFBQTtRQUNGLEdBQUcsS0FBQTtRQUNILFlBQVksRUFBWixVQUEyQixRQUFnQixFQUFFLE1BQVM7WUFDcEQsSUFBTSxNQUFNLEdBQWtCO2dCQUM1QixVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ3JCLFFBQVEsVUFBQTtnQkFDUixNQUFNLFFBQUE7YUFDUCxDQUFBO1lBQ0QsT0FBTyxNQUFNLENBQUE7UUFDZixDQUFDO1FBQ0QsV0FBVyxFQUFYLFVBQVksT0FBcUI7O1lBQXJCLHdCQUFBLEVBQUEsWUFBcUI7O2dCQUMvQixLQUFtQixJQUFBLFlBQUEsU0FBQSxPQUFPLENBQUEsZ0NBQUEscURBQUU7b0JBQXZCLElBQU0sSUFBSSxvQkFBQTtvQkFDYixJQUFNLE1BQU0sZ0JBQXFCLElBQUksSUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFFLENBQUE7b0JBQ25ELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQTtpQkFDcEM7Ozs7Ozs7OztRQUNILENBQUM7UUFDRCxZQUFZLEVBQVosVUFBZ0IsUUFBZ0IsRUFBRSxPQUE0QjtZQUM1RCxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFBO1FBQzlCLENBQUM7UUFDRCxPQUFPLEVBQVAsVUFBVyxHQUFXLEVBQUUsUUFBNEI7WUFDbEQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtZQUN4QixJQUFNLE9BQU8sR0FBbUIsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUEsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUE7WUFDMUUsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDO2dCQUMzQixJQUFJLEdBQUcsSUFBSSxRQUFRLEVBQUU7b0JBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFBO2lCQUNqQztxQkFBTTtvQkFDTCxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7aUJBQ3hCO1lBQ0gsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFBO1FBQ25CLENBQUM7UUFDRCxLQUFLLEVBQUwsVUFBUyxHQUFXLEVBQUUsUUFBaUI7WUFDckMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtRQUMzQixDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFoRkQsc0NBZ0ZDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdHlwZXMuZC50c1wiIC8+XG5cbnR5cGUgUmVxdWVzdE1lc3NhZ2UgPSB7XG4gIGVudGl0eU5hbWU6IHN0cmluZ1xuICBrZXk6IHN0cmluZ1xuICBzZW5kZXI6IHN0cmluZ1xufVxuXG50eXBlIFJlcGx5TWVzc2FnZSA9IHtcbiAgZW50aXR5TmFtZTogc3RyaW5nXG4gIGtleTogc3RyaW5nXG4gIHNlbmRlcjogc3RyaW5nXG4gIHZhbHVlOiBzdHJpbmdcbn1cblxuY29uc3QgUkVRVUVTVF9WQUxVRSA9ICdfX3JlcXVlc3RfdmFsdWVfXydcbmNvbnN0IFJFUExZX1ZBTFVFID0gJ19fcmVwbHlfdmFsdWVfXydcbmNvbnN0IFBPTExfSU5URVJWQUwgPSA1MDAwXG5cbmRlY2xhcmUgdmFyIHNldEludGVydmFsOiBhbnlcbmRlY2xhcmUgdmFyIGNsZWFySW50ZXJ2YWw6IGFueVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2hhbm5lbChpZDogc3RyaW5nLCBob3N0OiBhbnksIGJ1czogQnVzKTogSUNoYW5uZWwge1xuICBjb25zdCBoYW5kbGVyczogUmVjb3JkPHN0cmluZywgKHZhbHVlczogYW55KSA9PiB2b2lkPiA9IHt9XG4gIGxldCByZXF1ZXN0czogUmVjb3JkPHN0cmluZywgKHZhbHVlOiBhbnkpID0+IHZvaWQ+ID0ge31cbiAgY29uc3QgcmVzcG9uc2VzOiBSZWNvcmQ8c3RyaW5nLCAoKSA9PiBhbnk+ID0ge31cblxuICBidXMub24oaG9zdC5uYW1lLCAoYWN0aW9uOiBBY3Rpb248YW55PikgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1thY3Rpb24uYWN0aW9uSWRdXG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIoYWN0aW9uKVxuICAgIH1cbiAgICAvLyBjbGVhciBhbGwgcGVuZGluZyByZXF1ZXN0cyBmb3IgdGhpcyBlbnRpdHlcbiAgICByZXF1ZXN0cyA9IHt9XG4gIH0pXG5cbiAgYnVzLm9uKFJFUVVFU1RfVkFMVUUsIChtZXNzYWdlOiBSZXF1ZXN0TWVzc2FnZSkgPT4ge1xuICAgIGlmIChtZXNzYWdlLnNlbmRlciAhPT0gaWQgJiYgbWVzc2FnZS5lbnRpdHlOYW1lID09PSBob3N0Lm5hbWUpIHtcbiAgICAgIGNvbnN0IHsga2V5IH0gPSBtZXNzYWdlXG4gICAgICBjb25zdCByZXNwb25zZSA9IHJlc3BvbnNlc1trZXldXG4gICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXNwb25zZSgpXG4gICAgICAgIGNvbnN0IHJlcGx5OiBSZXBseU1lc3NhZ2UgPSB7XG4gICAgICAgICAgZW50aXR5TmFtZTogaG9zdC5uYW1lLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBzZW5kZXI6IGlkLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgYnVzLmVtaXQoUkVQTFlfVkFMVUUsIHJlcGx5KVxuICAgICAgfVxuICAgICAgLy8gY2xlYXIgcGVuZGluZyByZXF1ZXN0IGZvciB0aGlzIGtleVxuICAgICAgZGVsZXRlIHJlcXVlc3RzW2tleV1cbiAgICB9XG4gIH0pXG5cbiAgYnVzLm9uKFJFUExZX1ZBTFVFLCAobWVzc2FnZTogUmVwbHlNZXNzYWdlKSA9PiB7XG4gICAgaWYgKG1lc3NhZ2Uuc2VuZGVyICE9PSBpZCAmJiBtZXNzYWdlLmVudGl0eU5hbWUgPT09IGhvc3QubmFtZSkge1xuICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBtZXNzYWdlXG4gICAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdHNba2V5XVxuICAgICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdCh2YWx1ZSlcbiAgICAgIH1cbiAgICAgIC8vIGNsZWFyIHBlbmRpbmcgcmVxdWVzdCBmb3IgdGhpcyBrZXlcbiAgICAgIGRlbGV0ZSByZXF1ZXN0c1trZXldXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgaWQsXG4gICAgYnVzLFxuICAgIGNyZWF0ZUFjdGlvbjxUIGV4dGVuZHMge30+KGFjdGlvbklkOiBzdHJpbmcsIHZhbHVlczogVCkge1xuICAgICAgY29uc3QgYWN0aW9uOiBCYXNlQWN0aW9uPFQ+ID0ge1xuICAgICAgICBlbnRpdHlOYW1lOiBob3N0Lm5hbWUsXG4gICAgICAgIGFjdGlvbklkLFxuICAgICAgICB2YWx1ZXNcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY3Rpb25cbiAgICB9LFxuICAgIHNlbmRBY3Rpb25zKGFjdGlvbnM6IEFjdGlvbnMgPSBbXSkge1xuICAgICAgZm9yIChjb25zdCBiYXNlIG9mIGFjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYWN0aW9uOiBBY3Rpb248YW55PiA9IHsgLi4uYmFzZSwgc2VuZGVyOiBpZCB9XG4gICAgICAgIGJ1cy5lbWl0KGFjdGlvbi5lbnRpdHlOYW1lLCBhY3Rpb24pXG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVBY3Rpb248VD4oYWN0aW9uSWQ6IHN0cmluZywgaGFuZGxlcjogKHZhbHVlczogVCkgPT4gdm9pZCkge1xuICAgICAgaGFuZGxlcnNbYWN0aW9uSWRdID0gaGFuZGxlclxuICAgIH0sXG4gICAgcmVxdWVzdDxUPihrZXk6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogVCkgPT4gdm9pZCkge1xuICAgICAgcmVxdWVzdHNba2V5XSA9IGNhbGxiYWNrXG4gICAgICBjb25zdCByZXF1ZXN0OiBSZXF1ZXN0TWVzc2FnZSA9IHsgZW50aXR5TmFtZTogaG9zdC5uYW1lLCBrZXksIHNlbmRlcjogaWQgfVxuICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmIChrZXkgaW4gcmVxdWVzdHMpIHtcbiAgICAgICAgICBidXMuZW1pdChSRVFVRVNUX1ZBTFVFLCByZXF1ZXN0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXG4gICAgICAgIH1cbiAgICAgIH0sIFBPTExfSU5URVJWQUwpXG4gICAgfSxcbiAgICByZXBseTxUPihrZXk6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IFQpIHtcbiAgICAgIHJlc3BvbnNlc1trZXldID0gY2FsbGJhY2tcbiAgICB9XG4gIH1cbn1cbiJdfQ==